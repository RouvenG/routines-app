/* tslint:disable */
/* eslint-disable */
/**
 * Cloud Endpoints + GCF
 * Jural Backend for Cloud Endpoints
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
    Flow,
    FlowCreateRequest,
    FlowModificationRequest,
    FlowPatchRequest,
    FlowRunRequest,
    FlowRunResponse,
} from '../models/index';
import {
    FlowFromJSON,
    FlowToJSON,
    FlowCreateRequestFromJSON,
    FlowCreateRequestToJSON,
    FlowModificationRequestFromJSON,
    FlowModificationRequestToJSON,
    FlowPatchRequestFromJSON,
    FlowPatchRequestToJSON,
    FlowRunRequestFromJSON,
    FlowRunRequestToJSON,
    FlowRunResponseFromJSON,
    FlowRunResponseToJSON,
} from '../models/index';

export interface CreateWorkflowRequest {
    parameters: FlowCreateRequest;
}

export interface DeleteFlowRequest {
    flowId: string;
}

export interface GetWorkflowRequest {
    flowId: string;
    flowVersion: string;
}

export interface HandleGetPreflightRequest {
    flowId: string;
    flowVersion: string;
}

export interface HandlePatchPreflightRequest {
    flowId: string;
    flowVersion: string;
}

export interface HandlePreflightRequest {
    filter?: string;
}

export interface HandlePreflightRunRequest {
    flowId: string;
    flowVersion: string;
}

export interface ListWorkflowsRequest {
    filter?: string;
}

export interface ModifyWorkflowRequest {
    flowId: string;
    flowVersion: string;
    parameters: FlowModificationRequest;
}

export interface PatchWorkflowRequest {
    flowId: string;
    patch: FlowPatchRequest;
}

export interface RunWorkflowRequest {
    flowId: string;
    flowVersion: string;
    parameters: FlowRunRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create a workflow
     */
    async createWorkflowRaw(requestParameters: CreateWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Flow>> {
        if (requestParameters['parameters'] == null) {
            throw new runtime.RequiredError(
                'parameters',
                'Required parameter "parameters" was null or undefined when calling createWorkflow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firebase", []);
        }

        const response = await this.request({
            path: `/v1/flows`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FlowCreateRequestToJSON(requestParameters['parameters']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlowFromJSON(jsonValue));
    }

    /**
     * Create a workflow
     */
    async createWorkflow(requestParameters: CreateWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Flow> {
        const response = await this.createWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a flow
     */
    async deleteFlowRaw(requestParameters: DeleteFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['flowId'] == null) {
            throw new runtime.RequiredError(
                'flowId',
                'Required parameter "flowId" was null or undefined when calling deleteFlow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firebase", []);
        }

        const response = await this.request({
            path: `/v1/flows/{flow_id}`.replace(`{${"flow_id"}}`, encodeURIComponent(String(requestParameters['flowId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a flow
     */
    async deleteFlow(requestParameters: DeleteFlowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFlowRaw(requestParameters, initOverrides);
    }

    /**
     * Get a workflow
     */
    async getWorkflowRaw(requestParameters: GetWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Flow>> {
        if (requestParameters['flowId'] == null) {
            throw new runtime.RequiredError(
                'flowId',
                'Required parameter "flowId" was null or undefined when calling getWorkflow().'
            );
        }

        if (requestParameters['flowVersion'] == null) {
            throw new runtime.RequiredError(
                'flowVersion',
                'Required parameter "flowVersion" was null or undefined when calling getWorkflow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firebase", []);
        }

        const response = await this.request({
            path: `/v1/flows/{flow_id}/v/{flow_version}`.replace(`{${"flow_id"}}`, encodeURIComponent(String(requestParameters['flowId']))).replace(`{${"flow_version"}}`, encodeURIComponent(String(requestParameters['flowVersion']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlowFromJSON(jsonValue));
    }

    /**
     * Get a workflow
     */
    async getWorkflow(requestParameters: GetWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Flow> {
        const response = await this.getWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Respond to preflight request
     */
    async handleGetPreflightRaw(requestParameters: HandleGetPreflightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['flowId'] == null) {
            throw new runtime.RequiredError(
                'flowId',
                'Required parameter "flowId" was null or undefined when calling handleGetPreflight().'
            );
        }

        if (requestParameters['flowVersion'] == null) {
            throw new runtime.RequiredError(
                'flowVersion',
                'Required parameter "flowVersion" was null or undefined when calling handleGetPreflight().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/flows/{flow_id}/v/{flow_version}`.replace(`{${"flow_id"}}`, encodeURIComponent(String(requestParameters['flowId']))).replace(`{${"flow_version"}}`, encodeURIComponent(String(requestParameters['flowVersion']))),
            method: 'OPTIONS',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Respond to preflight request
     */
    async handleGetPreflight(requestParameters: HandleGetPreflightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.handleGetPreflightRaw(requestParameters, initOverrides);
    }

    /**
     * Respond to preflight request
     */
    async handlePatchPreflightRaw(requestParameters: HandlePatchPreflightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['flowId'] == null) {
            throw new runtime.RequiredError(
                'flowId',
                'Required parameter "flowId" was null or undefined when calling handlePatchPreflight().'
            );
        }

        if (requestParameters['flowVersion'] == null) {
            throw new runtime.RequiredError(
                'flowVersion',
                'Required parameter "flowVersion" was null or undefined when calling handlePatchPreflight().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/flows/{flow_id}`.replace(`{${"flow_id"}}`, encodeURIComponent(String(requestParameters['flowId']))).replace(`{${"flow_version"}}`, encodeURIComponent(String(requestParameters['flowVersion']))),
            method: 'OPTIONS',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Respond to preflight request
     */
    async handlePatchPreflight(requestParameters: HandlePatchPreflightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.handlePatchPreflightRaw(requestParameters, initOverrides);
    }

    /**
     * Respond to preflight request
     */
    async handlePreflightRaw(requestParameters: HandlePreflightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/flows`,
            method: 'OPTIONS',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Respond to preflight request
     */
    async handlePreflight(requestParameters: HandlePreflightRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.handlePreflightRaw(requestParameters, initOverrides);
    }

    /**
     * Respond to preflight request
     */
    async handlePreflightRunRaw(requestParameters: HandlePreflightRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['flowId'] == null) {
            throw new runtime.RequiredError(
                'flowId',
                'Required parameter "flowId" was null or undefined when calling handlePreflightRun().'
            );
        }

        if (requestParameters['flowVersion'] == null) {
            throw new runtime.RequiredError(
                'flowVersion',
                'Required parameter "flowVersion" was null or undefined when calling handlePreflightRun().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/flows/{flow_id}/v/{flow_version}/run`.replace(`{${"flow_id"}}`, encodeURIComponent(String(requestParameters['flowId']))).replace(`{${"flow_version"}}`, encodeURIComponent(String(requestParameters['flowVersion']))),
            method: 'OPTIONS',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Respond to preflight request
     */
    async handlePreflightRun(requestParameters: HandlePreflightRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.handlePreflightRunRaw(requestParameters, initOverrides);
    }

    /**
     * List workflows
     */
    async listWorkflowsRaw(requestParameters: ListWorkflowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firebase", []);
        }

        const response = await this.request({
            path: `/v1/flows`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * List workflows
     */
    async listWorkflows(requestParameters: ListWorkflowsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listWorkflowsRaw(requestParameters, initOverrides);
    }

    /**
     * Start a workflow modification job
     */
    async modifyWorkflowRaw(requestParameters: ModifyWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Flow>> {
        if (requestParameters['flowId'] == null) {
            throw new runtime.RequiredError(
                'flowId',
                'Required parameter "flowId" was null or undefined when calling modifyWorkflow().'
            );
        }

        if (requestParameters['flowVersion'] == null) {
            throw new runtime.RequiredError(
                'flowVersion',
                'Required parameter "flowVersion" was null or undefined when calling modifyWorkflow().'
            );
        }

        if (requestParameters['parameters'] == null) {
            throw new runtime.RequiredError(
                'parameters',
                'Required parameter "parameters" was null or undefined when calling modifyWorkflow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firebase", []);
        }

        const response = await this.request({
            path: `/v1/flows/{flow_id}/v/{flow_version}`.replace(`{${"flow_id"}}`, encodeURIComponent(String(requestParameters['flowId']))).replace(`{${"flow_version"}}`, encodeURIComponent(String(requestParameters['flowVersion']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FlowModificationRequestToJSON(requestParameters['parameters']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlowFromJSON(jsonValue));
    }

    /**
     * Start a workflow modification job
     */
    async modifyWorkflow(requestParameters: ModifyWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Flow> {
        const response = await this.modifyWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Patch the metadata of a flow
     */
    async patchWorkflowRaw(requestParameters: PatchWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Flow>> {
        if (requestParameters['flowId'] == null) {
            throw new runtime.RequiredError(
                'flowId',
                'Required parameter "flowId" was null or undefined when calling patchWorkflow().'
            );
        }

        if (requestParameters['patch'] == null) {
            throw new runtime.RequiredError(
                'patch',
                'Required parameter "patch" was null or undefined when calling patchWorkflow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firebase", []);
        }

        const response = await this.request({
            path: `/v1/flows/{flow_id}`.replace(`{${"flow_id"}}`, encodeURIComponent(String(requestParameters['flowId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: FlowPatchRequestToJSON(requestParameters['patch']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlowFromJSON(jsonValue));
    }

    /**
     * Patch the metadata of a flow
     */
    async patchWorkflow(requestParameters: PatchWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Flow> {
        const response = await this.patchWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start a workflow
     */
    async runWorkflowRaw(requestParameters: RunWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlowRunResponse>> {
        if (requestParameters['flowId'] == null) {
            throw new runtime.RequiredError(
                'flowId',
                'Required parameter "flowId" was null or undefined when calling runWorkflow().'
            );
        }

        if (requestParameters['flowVersion'] == null) {
            throw new runtime.RequiredError(
                'flowVersion',
                'Required parameter "flowVersion" was null or undefined when calling runWorkflow().'
            );
        }

        if (requestParameters['parameters'] == null) {
            throw new runtime.RequiredError(
                'parameters',
                'Required parameter "parameters" was null or undefined when calling runWorkflow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firebase", []);
        }

        const response = await this.request({
            path: `/v1/flows/{flow_id}/v/{flow_version}/run`.replace(`{${"flow_id"}}`, encodeURIComponent(String(requestParameters['flowId']))).replace(`{${"flow_version"}}`, encodeURIComponent(String(requestParameters['flowVersion']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FlowRunRequestToJSON(requestParameters['parameters']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlowRunResponseFromJSON(jsonValue));
    }

    /**
     * Start a workflow
     */
    async runWorkflow(requestParameters: RunWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlowRunResponse> {
        const response = await this.runWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
